<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }

        h1 {
            background-color: #3498db;
            color: #fff;
            text-align: center;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        form {
            margin-top: 20px;
        }

        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        button {
            background-color: #3498db;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        button:hover {
            background-color: #2980b9;
        }

        #searchResults {
            margin-top: 20px;
        }

        #searchResults h3 {
            margin-top: 10px;
            font-size: 18px;
        }

        #searchResults p {
            margin: 5px 0;
        }

        p.no-results {
            text-align: center;
            font-style: italic;
            color: #555;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
       }

/* Style for table header */
        th {
            background-color: #3498db;
            color: #fff;
            font-weight: bold;
            padding: 10px;
            text-align: left;
        }

        /* Style for table rows */
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        /* Style for table data cells */
        td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        /* Hover effect for table rows */
        tr:hover {
            background-color: #e0e0e0;
        }
    </style>
</head>
<body>
    <h1>Hello ya 3ayaan</h1>
    <div class="container">
        <h2>Add Family Member</h2>
        <button id="addFamilyMemberBtn">Add Family Member</button>
        <form id="familyMemberForm" style="display: none;" action="patient/addFamMem/<%=registeredUsername%>" method="POST">
            <label for="name">Name:</label>
            <input type="text" id="name" name="username" required><br><br>
        
            <label for="age">Age:</label>
            <input type="number" id="age" name="age" required><br><br>
            
            <label for="gender">Gender:</label>
            <input type="text" id="gender" name="gender" required><br><br>
            
            <label for="relation">Relation:</label>
            <select id="relation" name="relation" required>
                <option value="wife">Wife</option>
                <option value="husband">Husband</option>
                <option value="children">Children</option>
            </select>
            
            <label for="nationalID">National ID:</label>
            <input type="text" id="nationalID" name="nationalID" required><br><br>

            <button type="submit" id="submitButton">Submit</button>

            
        </form>
        <br>
        <br>
        <button onclick="window.location.href='/patient/viewFamily/<%=registeredUsername%>'">view Family members</button>
        <br>
        <br>
        <form action="/patient/viewDoctors" method="POST">
            <button type="submit">view doctors</button>
          </form>
        <br>
        <br>


        <form >
            <label for="doctorName">Doctor Name:</label>
            <input type="text" id="doctorName" >
            
            <label for="doctorSpeciality">Doctor Speciality:</label>
            <input type="text" id="doctorSpeciality" >

            <label for="availableDate">Available Date:</label>
            <input type="date" id="availableDate" >
            <label for="availableTime">Available Time:</label>
            <input type="time" id="availableTime" >
            <label for="search-field">Filter by Speciality:</label>
            <select id="speciality-field" name="search-field">
                <option value="null">'null'</option>
                <option value="ENT">ENT</option>
                <option value="Plastic Surgery">Plastic Surgery</option>
                <option value="Nervous System">Nervous System</option>
                <option value="Death">Death</option>

                <!-- Add more options as needed -->
            </select>
            

           


            <button type="button" id="searchDoctorsBtn">Search Doctors</button>
        </form>
       <br><br> 
    <button type="button" id="allApp">View All Appointments </button>
    <button type="button" id="prescriptions">View My Prescriptions </button>

    <form id="filterForm" style="display: none;">
            <label for="dropdown">Search for an appointment by appointment status:</label>

            <select name="status" id="status">  
                <option value="null">null</option> 
                <option value="upcoming">upcoming</option> 
                <option value="completed">completed</option> 
                <option value="cancelled">cancelled</option>
                <option value="resecheduled">resecheduled</option> 
    
     
    
            </select>
            <label for="date">Search for an appointment by date:</label>
            <input type="date" id="date" name="Start date">
            <input type="date" id="Edate" name="End date">

            <br>
            <button type="button" id="appSearch">Search for an appointment </button>
        </form>
        <form id="filterForm2" style="display: none;">
            <label for="dropdown">Search for a prescription by appointment status:</label>

            <select name="status" id="prepstatus">  
                <option value="null">null</option> 
                <option value="Filled">Filled</option> 
                <option value="Unfilled">Unfilled</option> 
            </select>
            <br>
            <label for="dropdown">Search for a prescription by Doctor's name:</label>

            <select name="name" id="DRname">  
                <option value="null">null</option> 
                <option value="Dr.DS">Dr.DS</option> 
                <option value="Nada">Nada</option> 
            </select>
           

            <label for="date">Search for precription by date:</label>
            <input type="date" id="prepdate" name="Date">
           
           
            <br>
            <button type="button" id="prepSearch">Search for a prescription </button>
        
        </form>

        <div id="searchResults">
        </div>
    </div>

    <script>
        const addFamilyMemberBtn = document.getElementById('addFamilyMemberBtn');
        const familyMemberForm = document.getElementById('familyMemberForm');
        const doctorNameInput = document.getElementById('doctorName');
        const doctorSpecialityInput = document.getElementById('doctorSpeciality');
        const doctorAvailableDate = document.getElementById('availableDate');
        const doctorAvailableTime = document.getElementById('availableTime');
        const searchDoctorsBtn = document.getElementById('searchDoctorsBtn'); 
        const appDate = document.getElementById('date');
        const appEDate = document.getElementById('Edate');
        const appStatus = document.getElementById('status');
        const searchAppBtn = document.getElementById('appSearch'); 
        const allAppBtn = document.getElementById('allApp'); 
        const prescriptions = document.getElementById('prescriptions'); 
        const prepStatus = document.getElementById('prepstatus');
        const prepDate = document.getElementById('prepdate');
        const prepDr = document.getElementById('DRname');
        const prepSearch = document.getElementById('prepSearch');
        const specialityField = document.getElementById('speciality-field');







        
        


      
    
        addFamilyMemberBtn.addEventListener('click', () => {
            if (familyMemberForm.style.display === 'none' || familyMemberForm.style.display === '') {
                familyMemberForm.style.display = 'block';
            } else {
                familyMemberForm.style.display = 'none';
            }
        });
    
        searchDoctorsBtn.addEventListener('click', async () => {
            console.log('Button clicked');
            const searchQuery = {
                name: doctorNameInput.value.trim(),
                speciality: doctorSpecialityInput.value.trim(),
                date: doctorAvailableDate.value.trim(),
                time: doctorAvailableTime.value.trim(),
                filterspec:specialityField.value.trim(),

            };
    
            try {
                const response = await fetch('patient/searchDoctors', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(searchQuery),
                });
    
                if (response.ok) {
                    const doctors = await response.json();
                    displayDoctors(doctors); // Call a function to display the doctors
                    filterForm.style.display = 'none';
                    filterForm2.style.display = 'none';



                } else {
                    console.error('Error searching doctors:', response.statusText);
                }
            } catch (error) {
                console.error('Error searching doctors:', error);
            }
        });
    
        // Function to display the retrieved doctors on the screen
        function displayDoctors(doctors) {
            const resultContainer = document.getElementById('searchResults');

    // Clear any previous search results
            resultContainer.innerHTML = '';

        if (doctors.length === 0) {
            resultContainer.innerHTML = '<p>No doctors found.</p>';
        } else {
            // Create a table element
            const table = document.createElement('table');

            // Create table header
            const tableHeader = document.createElement('thead');
            tableHeader.innerHTML = `
                <tr>
                    <th>Name</th>
                    <th>Speciality</th>
                </tr>
            `;
            table.appendChild(tableHeader);

            // Create table body
            const tableBody = document.createElement('tbody');

            doctors.forEach((doctor) => {
                // Create a table row for each doctor
                const row = document.createElement('tr');

                // Create table data cells for Name and Speciality
                const nameCell = document.createElement('td');
                //nameCell.textContent = doctor.Name;
                const doctorLink = document.createElement('a');
            doctorLink.textContent = doctor.Name;
            
            doctorLink.href = `patient/selectedDoctorDetails/${doctor.Username}`; 

            // Append the link to the name cell
            nameCell.appendChild(doctorLink);


                const specialityCell = document.createElement('td');
                specialityCell.textContent = doctor.Speciality;

                // Append cells to the row
                row.appendChild(nameCell);
                row.appendChild(specialityCell);

                // Append the row to the table body
                tableBody.appendChild(row);
        });

        // Append the table body to the table
        table.appendChild(tableBody);

        // Append the table to the result container
        resultContainer.appendChild(table);
    }
}
function displayAppointments(appointments) {
            const resultContainer = document.getElementById('searchResults');

    // Clear any previous search results
            resultContainer.innerHTML = '';

        if (appointments.length === 0) {
            resultContainer.innerHTML = '<p>No appointments found.</p>';
        } else {
            // Create a table element
            const table = document.createElement('table');

            // Create table header
            const tableHeader = document.createElement('thead');
            tableHeader.innerHTML = `
                <tr>
                    <th>Doctor's Username</th>
                    <th>Doctor's Name</th>
                    <th>Appointment Start Time</th>
                    <th>Appointment End Time</th>
                    <th>Appointment Staus</th>
                </tr>
            `;
            table.appendChild(tableHeader);

            // Create table body
            const tableBody = document.createElement('tbody');

            appointments.forEach((app) => {
                // Create a table row for each doctor
                const row = document.createElement('tr');

                // Create table data cells for Name and Speciality
                const usernameCell = document.createElement('td');
                usernameCell.textContent = app.DoctorUsername;

                const nameCell = document.createElement('td');
                nameCell.textContent = app.DoctorName;

                const StartdateCell = document.createElement('td');
                StartdateCell.textContent = app.StartDate;
                const EnddateCell = document.createElement('td');
                EnddateCell.textContent = app.EndDate;
                const statusCell = document.createElement('td');
                statusCell.textContent = app.Status;

                // Append cells to the row
                row.appendChild(usernameCell);
                row.appendChild(nameCell);
                row.appendChild(StartdateCell);
                row.appendChild(EnddateCell);
                row.appendChild(statusCell);

                // Append the row to the table body
                tableBody.appendChild(row);
        });

        // Append the table body to the table
        table.appendChild(tableBody);

        // Append the table to the result container
        resultContainer.appendChild(table);
    }
}
function displayPrecriptions(prescriptions) {
            const resultContainer = document.getElementById('searchResults');

    // Clear any previous search results
            resultContainer.innerHTML = '';

        if (prescriptions.length === 0) {
            resultContainer.innerHTML = '<p>No prescriptions found.</p>';
        } else {
            // Create a table element
            const table = document.createElement('table');

            // Create table header
            const tableHeader = document.createElement('thead');
            tableHeader.innerHTML = `
                <tr>
                    <th>Prescription Number</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Doctor's Name</th>
                    <th>View</th>


                </tr>
            `;
            table.appendChild(tableHeader);

            // Create table body
            const tableBody = document.createElement('tbody');
            let i=0;
            prescriptions.forEach((prescription) => {
         
            const row = document.createElement('tr');
            const prescriptionNo = document.createElement('td');
                prescriptionNo.textContent = i;
            
            const prepDateCell = document.createElement('td');
                prepDateCell.textContent = prescription.PrecriptionDate;

                const statusCell = document.createElement('td');
                statusCell.textContent = prescription.Status;

                const docNameCell = document.createElement('td');
                docNameCell.textContent = prescription.DocUsername;
                  const viewCell=document.createElement('td');
                  const preLink = document.createElement('a');
                 preLink.textContent = "View";
                 preLink.href = `patient/selectprescription/${'Nadatest3'}/${i}`; 


                viewCell.appendChild(preLink);

            
                 
                row.appendChild(prescriptionNo);
                row.appendChild(prepDateCell);
                row.appendChild(statusCell);
                row.appendChild(docNameCell);
                row.appendChild(viewCell);

                i++;
                tableBody.appendChild(row);

        });
        // Append the table body to the table
        table.appendChild(tableBody);

        // Append the table to the result container
        resultContainer.appendChild(table);
    }
}






searchAppBtn.addEventListener('click', async () => {
            console.log('Button clicked');
            const searchQuery = {
                sDate: appDate.value.trim(),
                eDate:appEDate.value.trim(),
                status:appStatus.value.trim(),
            };
    
            try {
                const response = await fetch('patient/search/:registeredUsername', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(searchQuery),
                });
                console.log('heree1')

    
                if (response.ok) {
                    console.log('heree')

                    const BookedAppointments = await response.json();
                    displayAppointments(BookedAppointments)
                    filterForm2.style.display = 'none';


                    // Call a function to display the doctors
                } else {
                    console.error('Error searching appointments:', response.statusText);
                }
            } catch (error) {
                console.error('Error searching appointments:', error);
            }
        });
        allAppBtn.addEventListener('click', async () => {
          
    
            try {
                const response = await fetch('patient/allApp/:registeredUsername', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                console.log('heree1')

    
                if (response.ok) {
                    console.log('heree')

                    const BookedAppointments = await response.json();
                    displayAppointments(BookedAppointments);
                    filterForm.style.display = 'block';
                    filterForm2.style.display = 'none';



                    // Call a function to display the doctors
                } else {
                    console.error('Error searching appointments:', response.statusText);
                }
            } catch (error) {
                console.error('Error searching appointments:', error);
            }
        });
        prescriptions.addEventListener('click', async () => {
           
            
    
          try {
              const response = await fetch('patient/prescriptions/:registeredUsername', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },

              });

  
              if (response.ok) {

                  const prescriptions = await response.json();
                
                  displayPrecriptions(prescriptions)
                  filterForm2.style.display = 'block';
                  filterForm.style.display = 'none';




                  // Call a function to display the doctors
              } else {
                  console.error('Error searching appointments:', response.statusText);
              }
          } catch (error) {
              console.error('Error searching appointments:', error);
          }
      });
      prepSearch.addEventListener('click', async () => {
        const searchQuery = {
                prepDate: prepDate.value.trim(),
                prepStatus:prepStatus.value.trim(),
                prepDr:prepDr.value.trim(),
            };
    
          try {
              const response = await fetch('patient/searchprescriptions/:registeredUsername', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(searchQuery),

              });

  
              if (response.ok) {

                  const prescriptions = await response.json();
                
                  displayPrecriptions(prescriptions)
                  //filterForm2.style.display = 'block';
                  filterForm.style.display = 'none';



                  // Call a function to display the doctors
              } else {
                  console.error('Error searching appointments:', response.statusText);
              }
          } catch (error) {
              console.error('Error searching appointments:', error);
          }
      });
       

    </script>
    
</body>
</html>
